// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetCatalogueHandlerFunc turns a function with the right signature into a get catalogue handler
type GetCatalogueHandlerFunc func(GetCatalogueParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCatalogueHandlerFunc) Handle(params GetCatalogueParams) middleware.Responder {
	return fn(params)
}

// GetCatalogueHandler interface for that can handle valid get catalogue params
type GetCatalogueHandler interface {
	Handle(GetCatalogueParams) middleware.Responder
}

// NewGetCatalogue creates a new http.Handler for the get catalogue operation
func NewGetCatalogue(ctx *middleware.Context, handler GetCatalogueHandler) *GetCatalogue {
	return &GetCatalogue{Context: ctx, Handler: handler}
}

/*GetCatalogue swagger:route GET /catalogue getCatalogue

Show catalogue of products

*/
type GetCatalogue struct {
	Context *middleware.Context
	Handler GetCatalogueHandler
}

func (o *GetCatalogue) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetCatalogueParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
