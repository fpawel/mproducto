// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// PutUserHandlerFunc turns a function with the right signature into a put user handler
type PutUserHandlerFunc func(PutUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutUserHandlerFunc) Handle(params PutUserParams) middleware.Responder {
	return fn(params)
}

// PutUserHandler interface for that can handle valid put user params
type PutUserHandler interface {
	Handle(PutUserParams) middleware.Responder
}

// NewPutUser creates a new http.Handler for the put user operation
func NewPutUser(ctx *middleware.Context, handler PutUserHandler) *PutUser {
	return &PutUser{Context: ctx, Handler: handler}
}

/*PutUser swagger:route PUT /user putUser

Add new user

*/
type PutUser struct {
	Context *middleware.Context
	Handler PutUserHandler
}

func (o *PutUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutUserBody put user body
// swagger:model PutUserBody
type PutUserBody struct {

	// user email
	// Required: true
	// Min Length: 1
	Email *string `json:"email"`

	// user name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// valid password
	// Required: true
	// Min Length: 1
	Password *string `json:"password"`
}

// Validate validates this put user body
func (o *PutUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutUserBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("newUser"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	if err := validate.MinLength("newUser"+"."+"email", "body", string(*o.Email), 1); err != nil {
		return err
	}

	return nil
}

func (o *PutUserBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("newUser"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MinLength("newUser"+"."+"name", "body", string(*o.Name), 1); err != nil {
		return err
	}

	return nil
}

func (o *PutUserBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("newUser"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	if err := validate.MinLength("newUser"+"."+"password", "body", string(*o.Password), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutUserBody) UnmarshalBinary(b []byte) error {
	var res PutUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
